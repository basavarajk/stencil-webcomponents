import '../../stencil.core';
import { EventEmitter } from '../../stencil.core';
import { Cancelable } from 'lodash';
import { IResizeEvent } from './interfaces';
export declare class SplitMe {
    el: HTMLElement;
    /**
     * The number of slots in the splitter.
     */
    n: number;
    /**
     * The direction of the splitter.
     */
    d: 'horizontal' | 'vertical';
    /**
     * Prevent the splitter from being resized.
     */
    fixed: boolean;
    /**
     * The initial sizes of the slots.
     * Acceptable formats are: `sizes="0.33, 0.67"` or `sizes="50%, 25%, 25%"`
     */
    sizes: string | number[];
    /**
     * The minimum sizes of the slots.
     * Same format as `sizes`
     */
    minSizes: string | number[];
    /**
     * The maximum sizes of the slots.
     * Same format as `sizes`
     */
    maxSizes: string | number[];
    /**
     * The minimum time (in ms) between resize events while dragging.
     */
    throttle: number;
    slotEnd: number[];
    /**
     * Emitted every time dragging causes the slots to resize
     */
    slotResized: EventEmitter<IResizeEvent>;
    watchN(): void;
    watchSizes(): void;
    watchMinSizes(): void;
    watchMaxSizes(): void;
    watchThrottle(curr: number): void;
    throttledResize: Function & Cancelable;
    minSizesArr: number[];
    maxSizesArr: number[];
    nChanged: boolean;
    sizesChanged: boolean;
    minSizesChanged: boolean;
    maxSizesChanged: boolean;
    componentWillLoad(): void;
    componentWillUpdate(): void;
    defaultSlotEnd(n: number): number[];
    assignedSlotEnd(sizes: number[]): number[];
    rescaleSlotEnd(n: number, oldEnd: number[]): number[];
    defaultMinSizes(n: number): number[];
    defaultMaxSizes(n: number): number[];
    parseSizes(sizesStr: string | number[]): number[];
    onDragStart(event: DragEvent, i: number): void;
    onTouchMove: (event: TouchEvent, i: number) => void;
    resize(x: number, y: number, i: number, e: MouseEvent | TouchEvent): void;
    slotEndToSizes(slotEnd: number[]): number[];
    getSlotSize(i: number, slotEnd: number[]): number;
    render(): JSX.Element;
}
