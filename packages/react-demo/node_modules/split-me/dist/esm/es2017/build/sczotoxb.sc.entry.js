/*! Built with http://stenciljs.com */
import { h } from '../split-me.core.js';

var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the `TypeError` message for "Functions" methods. */
var FUNC_ERROR_TEXT = 'Expected a function';

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/** Used to match leading and trailing whitespace. */
var reTrim = /^\s+|\s+$/g;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max,
    nativeMin = Math.min;

/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */
var now = function() {
  return root.Date.now();
};

/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */
function debounce(func, wait, options) {
  var lastArgs,
      lastThis,
      maxWait,
      result,
      timerId,
      lastCallTime,
      lastInvokeTime = 0,
      leading = false,
      maxing = false,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  wait = toNumber(wait) || 0;
  if (isObject(options)) {
    leading = !!options.leading;
    maxing = 'maxWait' in options;
    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }

  function invokeFunc(time) {
    var args = lastArgs,
        thisArg = lastThis;

    lastArgs = lastThis = undefined;
    lastInvokeTime = time;
    result = func.apply(thisArg, args);
    return result;
  }

  function leadingEdge(time) {
    // Reset any `maxWait` timer.
    lastInvokeTime = time;
    // Start the timer for the trailing edge.
    timerId = setTimeout(timerExpired, wait);
    // Invoke the leading edge.
    return leading ? invokeFunc(time) : result;
  }

  function remainingWait(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime,
        result = wait - timeSinceLastCall;

    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
  }

  function shouldInvoke(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime;

    // Either this is the first call, activity has stopped and we're at the
    // trailing edge, the system time has gone backwards and we're treating
    // it as the trailing edge, or we've hit the `maxWait` limit.
    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
  }

  function timerExpired() {
    var time = now();
    if (shouldInvoke(time)) {
      return trailingEdge(time);
    }
    // Restart the timer.
    timerId = setTimeout(timerExpired, remainingWait(time));
  }

  function trailingEdge(time) {
    timerId = undefined;

    // Only invoke if we have `lastArgs` which means `func` has been
    // debounced at least once.
    if (trailing && lastArgs) {
      return invokeFunc(time);
    }
    lastArgs = lastThis = undefined;
    return result;
  }

  function cancel() {
    if (timerId !== undefined) {
      clearTimeout(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = undefined;
  }

  function flush() {
    return timerId === undefined ? result : trailingEdge(now());
  }

  function debounced() {
    var time = now(),
        isInvoking = shouldInvoke(time);

    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time;

    if (isInvoking) {
      if (timerId === undefined) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        // Handle invocations in a tight loop.
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === undefined) {
      timerId = setTimeout(timerExpired, wait);
    }
    return result;
  }
  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}

/**
 * Creates a throttled function that only invokes `func` at most once per
 * every `wait` milliseconds. The throttled function comes with a `cancel`
 * method to cancel delayed `func` invocations and a `flush` method to
 * immediately invoke them. Provide `options` to indicate whether `func`
 * should be invoked on the leading and/or trailing edge of the `wait`
 * timeout. The `func` is invoked with the last arguments provided to the
 * throttled function. Subsequent calls to the throttled function return the
 * result of the last `func` invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the throttled function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.throttle` and `_.debounce`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to throttle.
 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=true]
 *  Specify invoking on the leading edge of the timeout.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new throttled function.
 * @example
 *
 * // Avoid excessively updating the position while scrolling.
 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
 *
 * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
 * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
 * jQuery(element).on('click', throttled);
 *
 * // Cancel the trailing throttled invocation.
 * jQuery(window).on('popstate', throttled.cancel);
 */
function throttle(func, wait, options) {
  var leading = true,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  if (isObject(options)) {
    leading = 'leading' in options ? !!options.leading : leading;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }
  return debounce(func, wait, {
    'leading': leading,
    'maxWait': wait,
    'trailing': trailing
  });
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && objectToString.call(value) == symbolTag);
}

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = value.replace(reTrim, '');
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

var lodash_throttle = throttle;

class SplitMe {
    constructor() {
        this.n = 1;
        this.d = 'horizontal';
        this.fixed = false;
        this.sizes = '';
        this.minSizes = '';
        this.maxSizes = '';
        this.throttle = 0;
        this.nChanged = false;
        this.sizesChanged = false;
        this.minSizesChanged = false;
        this.maxSizesChanged = false;
        this.onTouchMove = (event, i) => {
            event.preventDefault();
            if (event.touches.length > 0) {
                this.throttledResize(event.touches[0].clientX, event.touches[0].clientY, i, event);
            }
        };
    }
    watchN() {
        this.nChanged = true;
    }
    watchSizes() {
        this.sizesChanged = true;
    }
    watchMinSizes() {
        this.minSizesChanged = true;
    }
    watchMaxSizes() {
        this.maxSizesChanged = true;
    }
    watchThrottle(curr) {
        this.throttledResize = lodash_throttle(this.resize.bind(this), curr);
    }
    componentWillLoad() {
        this.throttledResize = lodash_throttle(this.resize.bind(this), this.throttle);
        let sizes = this.parseSizes(this.sizes);
        if (sizes.length === this.n) {
            this.slotEnd = this.assignedSlotEnd(sizes);
        }
        else {
            this.slotEnd = this.defaultSlotEnd(this.n);
        }
        let minSizes = this.parseSizes(this.minSizes);
        if (minSizes.length === this.n) {
            this.minSizesArr = minSizes;
        }
        else {
            this.minSizesArr = this.defaultMinSizes(this.n);
        }
        let maxSizes = this.parseSizes(this.maxSizes);
        if (maxSizes.length === this.n) {
            this.maxSizesArr = maxSizes;
        }
        else {
            this.maxSizesArr = this.defaultMaxSizes(this.n);
        }
    }
    componentWillUpdate() {
        let sizes;
        if (this.sizesChanged) {
            sizes = this.parseSizes(this.sizes);
            if (sizes.length !== this.n) {
                this.sizesChanged = false;
            }
        }
        if (this.sizesChanged) {
            this.slotEnd = this.assignedSlotEnd(sizes);
            this.nChanged = false;
            this.sizesChanged = false;
        }
        else if (this.nChanged) {
            this.slotEnd = this.rescaleSlotEnd(this.n, this.slotEnd);
            this.nChanged = false;
        }
        if (this.minSizesChanged) {
            let minSizes = this.parseSizes(this.minSizes);
            if (minSizes.length === this.n) {
                this.minSizesArr = minSizes;
            }
            else {
                this.minSizesArr = this.defaultMinSizes(this.n);
            }
            this.minSizesChanged = false;
        }
        if (this.maxSizesChanged) {
            let maxSizes = this.parseSizes(this.minSizes);
            if (maxSizes.length === this.n) {
                this.maxSizesArr = maxSizes;
            }
            else {
                this.maxSizesArr = this.defaultMaxSizes(this.n);
            }
            this.maxSizesChanged = false;
        }
    }
    defaultSlotEnd(n) {
        let slotEnd = [];
        for (let i = 0; i < n; ++i) {
            slotEnd.push((i + 1) / n);
        }
        return slotEnd;
    }
    assignedSlotEnd(sizes) {
        let slotEnd = [];
        let currFrac = 0;
        for (let i = 0; i < sizes.length; ++i) {
            currFrac += sizes[i];
            slotEnd.push(Math.min(1, currFrac));
        }
        return slotEnd;
    }
    rescaleSlotEnd(n, oldEnd) {
        let scale = oldEnd.length / n;
        let slotEnd = [];
        for (let i = 0; i < n - 1; ++i) {
            if (i < oldEnd.length) {
                slotEnd.push(oldEnd[i] * scale);
            }
            else {
                slotEnd.push((i + 1) / n);
            }
        }
        slotEnd.push(1);
        return slotEnd;
    }
    defaultMinSizes(n) {
        let minSizes = [];
        for (let i = 0; i < n; ++i) {
            minSizes.push(0);
        }
        return minSizes;
    }
    defaultMaxSizes(n) {
        let maxSizes = [];
        for (let i = 0; i < n; ++i) {
            maxSizes.push(1);
        }
        return maxSizes;
    }
    parseSizes(sizesStr) {
        if (!sizesStr) {
            return [];
        }
        if (Array.isArray(sizesStr)) {
            if (sizesStr.length === this.n) {
                return sizesStr;
            }
            else {
                return [];
            }
        }
        try {
            const parsed = JSON.parse(sizesStr);
            if (Array.isArray(parsed)) {
                if (parsed.length === this.n) {
                    return parsed;
                }
                else {
                    return [];
                }
            }
        }
        catch (e) { }
        let sizesStrArr = sizesStr.split(',');
        if (sizesStrArr.length !== this.n) {
            return [];
        }
        let sizes = [];
        const percentRegex = /^\s*\d+(\.\d*)?\%\s*$/;
        const fracRegex = /^\s*(0|1)(\.\d*)?\s*$/;
        for (let i = 0; i < sizesStrArr.length; ++i) {
            let str = sizesStrArr[i];
            if (str.match(percentRegex)) {
                sizes.push(parseFloat(str) / 100);
            }
            else if (str.match(fracRegex)) {
                sizes.push(parseFloat(str));
            }
            else {
                return [];
            }
        }
        return sizes;
    }
    onDragStart(event, i) {
        event.preventDefault();
        const mouseMoveListener = (e) => {
            this.throttledResize(e.clientX, e.clientY, i, e);
        };
        const mouseUpListener = () => {
            window.removeEventListener('mousemove', mouseMoveListener);
            window.removeEventListener('mouseup', mouseUpListener);
        };
        window.addEventListener('mousemove', mouseMoveListener);
        window.addEventListener('mouseup', mouseUpListener);
    }
    resize(x, y, i, e) {
        let start = i > 0 ? this.slotEnd[i - 1] : 0;
        let min = start + this.minSizesArr[i];
        min = Math.max(min, this.slotEnd[i + 1] - this.maxSizesArr[i + 1]);
        let max = i < this.n - 1 ? this.slotEnd[i + 1] : 1;
        max -= this.minSizesArr[i + 1];
        max = Math.min(max, start + this.maxSizesArr[i]);
        let frac;
        let rect = this.el.getBoundingClientRect();
        if (this.d === 'vertical') {
            frac = (y - rect.top) / rect.height;
        }
        else {
            frac = (x - rect.left) / rect.width;
        }
        let doResize = false;
        if (frac < min) {
            if (this.slotEnd[i] > min) {
                frac = min;
                doResize = true;
            }
        }
        else if (frac > max) {
            if (this.slotEnd[i] < max) {
                frac = max;
                doResize = true;
            }
        }
        else {
            doResize = true;
        }
        if (doResize) {
            this.slotEnd = [
                ...this.slotEnd.slice(0, i),
                frac,
                ...this.slotEnd.slice(i + 1)
            ];
            this.slotResized.emit({
                divider: i,
                sizes: this.slotEndToSizes(this.slotEnd),
                originalEvent: e
            });
        }
    }
    slotEndToSizes(slotEnd) {
        const sizes = [];
        for (let i = 0; i < slotEnd.length; ++i) {
            sizes.push(this.getSlotSize(i, slotEnd));
        }
        return sizes;
    }
    getSlotSize(i, slotEnd) {
        if (i === 0) {
            return slotEnd[i];
        }
        else {
            return slotEnd[i] - slotEnd[i - 1];
        }
    }
    render() {
        if (!this.slotEnd || this.slotEnd.length === 0) {
            return null;
        }
        let slotContainers = [];
        let slotDividers = [];
        let phantomDividers = [];
        for (let i = 0; i < this.n; ++i) {
            let containerId = `container${i}`;
            let slotName = `${i}`;
            let size = this.getSlotSize(i, this.slotEnd);
            let style;
            if (this.d === 'vertical') {
                style = { width: '100%', height: `${size * 100}%` };
            }
            else {
                style = { width: `${size * 100}%`, height: '100%' };
            }
            slotContainers.push(h("div", { id: containerId, style: style },
                h("slot", { name: slotName })));
        }
        for (let i = 0; i < this.n - 1; ++i) {
            let style;
            let displayClasses;
            let phantomClasses;
            if (this.d === 'vertical') {
                style = { top: `${100 * this.slotEnd[i]}%` };
                displayClasses = 'divider-v display-divider-v';
                phantomClasses = 'divider-v phantom-divider-v';
            }
            else {
                style = { left: `${100 * this.slotEnd[i]}%` };
                displayClasses = 'divider-h display-divider-h';
                phantomClasses = 'divider-h phantom-divider-h';
            }
            slotDividers.push(h("div", { class: displayClasses, style: style }));
            if (!this.fixed) {
                phantomDividers.push(h("div", { class: phantomClasses, draggable: true, onDragStart: e => {
                        this.onDragStart(e, i);
                    }, onTouchMove: e => {
                        this.onTouchMove(e, i);
                    }, style: style }));
            }
        }
        return (h("div", { class: "top-container" },
            h("div", { class: "dividers-container" },
                slotDividers,
                phantomDividers),
            h("div", { class: this.d === 'vertical' ? 'slots-container-v' : 'slots-container-h' }, slotContainers)));
    }
    static get is() { return "split-me"; }
    static get encapsulation() { return "shadow"; }
    static get properties() { return {
        "d": {
            "type": String,
            "attr": "d"
        },
        "el": {
            "elementRef": true
        },
        "fixed": {
            "type": Boolean,
            "attr": "fixed"
        },
        "maxSizes": {
            "type": String,
            "attr": "max-sizes",
            "watchCallbacks": ["watchMaxSizes"]
        },
        "minSizes": {
            "type": String,
            "attr": "min-sizes",
            "watchCallbacks": ["watchMinSizes"]
        },
        "n": {
            "type": Number,
            "attr": "n",
            "watchCallbacks": ["watchN"]
        },
        "sizes": {
            "type": String,
            "attr": "sizes",
            "watchCallbacks": ["watchSizes"]
        },
        "slotEnd": {
            "state": true
        },
        "throttle": {
            "type": Number,
            "attr": "throttle",
            "watchCallbacks": ["watchThrottle"]
        }
    }; }
    static get events() { return [{
            "name": "slotResized",
            "method": "slotResized",
            "bubbles": true,
            "cancelable": true,
            "composed": true
        }]; }
    static get style() { return ".sc-split-me-h{--divider-length:100%;--divider-thickness:0.15rem;--divider-color:#eee;--divider-shadow:0 0 0.3rem #000;--divider-image-h:none;--divider-image-v:none;--divider-background-repeat:no-repeat;--divider-background-position:center}.divider-h.sc-split-me{height:100%;position:absolute;top:0;-webkit-transform:translateX(-50%);transform:translateX(-50%)}.divider-v.sc-split-me{width:100%;position:absolute;left:0;-webkit-transform:translateY(-50%);transform:translateY(-50%)}.display-divider-h.sc-split-me{width:var(--divider-thickness);height:var(--divider-length);background-image:var(--divider-image-h);top:50%}.display-divider-h.sc-split-me, .display-divider-v.sc-split-me{-webkit-box-shadow:var(--divider-shadow);box-shadow:var(--divider-shadow);background-color:var(--divider-color);background-repeat:var(--divider-background-repeat);background-position:var(--divider-background-position);-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);z-index:1}.display-divider-v.sc-split-me{height:var(--divider-thickness);width:var(--divider-length);background-image:var(--divider-image-v);left:50%}.phantom-divider-h.sc-split-me{cursor:col-resize;width:2rem}.phantom-divider-h.sc-split-me, .phantom-divider-v.sc-split-me{background-color:transparent;z-index:2}.phantom-divider-v.sc-split-me{cursor:row-resize;height:2rem}.top-container.sc-split-me{position:relative;width:100%;height:100%;overflow:hidden}.slots-container-h.sc-split-me, .slots-container-v.sc-split-me{position:relative;display:-ms-flexbox;display:flex;height:100%}.slots-container-v.sc-split-me{-ms-flex-direction:column;flex-direction:column}.dividers-container.sc-split-me{position:absolute;left:0;top:0;height:100%;width:100%}"; }
}

export { SplitMe };
